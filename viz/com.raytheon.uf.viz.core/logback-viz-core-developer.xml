<configuration debug="false" scan="false" packagingData="false">
   <!-- Only define when not wanting to use the UF Standard.
   <property scope="context" name="log.message.pattern" value="%-5p %d [%t] %c{0}: %m%n"/>
   -->

   <!-- 
       if you want to send messages to alertviz instead of alertview,
         1. change this property of alertview.enabled to false
         2. comment out the AlertViewAppender and uncomment the StatusMessageAppender
         
         TODO: Come up with easier way to switch between the two.  We could do it
         conditionally but that would require adding the Janino library which seems
         like overkill for a single use case for developers.  
           -->
   <property scope="system" name="alertview.enabled" value="true" />

   <!-- TODO should somehow be contributed from alertviz plugin -->
   <!-- appender name="AlertAppender" class="com.raytheon.uf.viz.alertviz.StatusMessageAppender">
      <connFactoryClass>org.apache.activemq.ActiveMQConnectionFactory</connFactoryClass>
      <destName>messages</destName>
   </appender-->
   
   <!--  TODO should somehow be contributed from alertview plugin -->
   <appender name="AlertAppender" class="com.raytheon.uf.viz.alertview.logback.AlertViewAppender" />

   <appender name="console" class="ch.qos.logback.core.ConsoleAppender"> 
      <encoder class="com.raytheon.uf.common.logback.encoder.UFStdEncoder"/> 
      <filter class="com.raytheon.uf.common.logback.filter.InvertedThresholdFilter">
         <level>INFO</level>
      </filter>
   </appender>

   <appender name="errConsole" class="ch.qos.logback.core.ConsoleAppender">
      <target>System.err</target>
      <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
        <level>WARN</level>
      </filter>
      <encoder class="com.raytheon.uf.common.logback.encoder.UFStdEncoder"/> 
   </appender>

   <!-- this is only used if alertviz is running inside the same process --> 
   <logger name="AlertVizAdminLogger" level="error" additivity="false">
      <appender-ref ref="errConsole"/>
   </logger>

   <logger name="CaveLogger" level="all">
      <appender-ref ref="AlertAppender"/>
   </logger>

   <timestamp key="startTime" datePattern="yyyyMMdd_HHmmss" />
   
   <!-- CaveRequest log -->
   <define name="caveRequestLogFile" class="com.raytheon.uf.common.logback.LogFilePropertyDefiner" >
      <directory>${user.home}/${LOGDIR}</directory>
      <name>cave_${startTime}_pid_%PID%_request.log</name>
   </define>   

   <appender name="CaveRequestLogAppender" class="ch.qos.logback.core.FileAppender">
      <encoder class="com.raytheon.uf.common.logback.encoder.UFStdEncoder"/> 
      <file>${caveRequestLogFile}</file>
   </appender>   

   <appender name="AsyncCaveRequestLogAppender" class="ch.qos.logback.classic.AsyncAppender">
      <queueSize>500</queueSize>
      <appender-ref ref="CaveRequestLogAppender"/>
   </appender>   

   <logger name="CaveRequestLogger" level="all" additivity="false">
      <appender-ref ref="AsyncCaveRequestLogAppender"/>
   </logger>

   <!-- PyPiesRequest log -->
   <define name="pyPiesRequestLogFile" class="com.raytheon.uf.common.logback.LogFilePropertyDefiner" >
      <directory>${user.home}/${LOGDIR}</directory>
      <name>cave_${startTime}_pid_%PID%_pypies.log</name>
   </define>   

   <appender name="PyPiesRequestLogAppender" class="ch.qos.logback.core.FileAppender">
      <encoder class="com.raytheon.uf.common.logback.encoder.UFStdEncoder"/> 
      <file>${pyPiesRequestLogFile}</file>
   </appender>   

   <appender name="AsyncPyPiesRequestLogAppender" class="ch.qos.logback.classic.AsyncAppender">
      <queueSize>500</queueSize>
      <appender-ref ref="PyPiesRequestLogAppender"/>
   </appender>   

   <logger name="PyPiesRequestLogger" level="all" additivity="false">
      <appender-ref ref="AsyncPyPiesRequestLogAppender"/>
   </logger>

   <!-- Performance log -->
   <define name="performanceLogFile" class="com.raytheon.uf.common.logback.LogFilePropertyDefiner" >
       <directory>${user.home}/${LOGDIR}</directory>
       <name>cave_${startTime}_pid_%PID%_perf.log</name>
   </define>

   <appender name="PerformanceLogAppender" class="ch.qos.logback.core.FileAppender">
      <file>${performanceLogFile}</file>
      <encoder class="com.raytheon.uf.common.logback.encoder.UFStdEncoder"/> 
   </appender>

   <appender name="AsyncPerfLogAppender" class="ch.qos.logback.classic.AsyncAppender">
      <queueSize>500</queueSize>
      <appender-ref ref="PerformanceLogAppender"/>
   </appender> 

   <logger name="PerformanceLogger" level="all" additivity="false">
      <appender-ref ref="AsyncPerfLogAppender"/>
   </logger>

   <!-- TODO should somehow be contributed from viz.gfe plugin -->
   <logger name="ProductEditorLogger" level="all">
   </logger>

   <logger name="com.raytheon" level="info"/>
   
   <logger name="mx4j" level="error" />
   <logger name="org.apache" level="info" />
   <logger name="org.apache.commons.beanutils" level="warn" />
   <logger name="org.apache.qpid" level="warn" />
   <logger name="org.geotools" level="warn" />
   <logger name="org.apache.xbean.spring" level="warn" />

   <!-- Silence viz spring startup info messages -->
   <logger name="org.springframework" level="error" />
   <logger name="com.raytheon.uf.viz.spring" level="warn" />

   <root level="info"> 
      <appender-ref ref="console"/> 
      <appender-ref ref="errConsole"/>
   </root> 
</configuration> 
